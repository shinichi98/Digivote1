{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar request = require('request');\n\nvar SendOtp = /*#__PURE__*/function () {\n  /**\n   * Creates a new SendOtp instance\n   * @param {string} authKey Authentication key\n   * @param {string, optional} messageTemplate\n   */\n  function SendOtp(authKey, messageTemplate) {\n    _classCallCheck(this, SendOtp);\n\n    this.authKey = authKey;\n\n    if (messageTemplate) {\n      this.messageTemplate = messageTemplate;\n    } else {\n      this.messageTemplate = \"Your otp is {{otp}}. Please do not share it with anybody\";\n    }\n\n    this.otp_expiry = 1440; //1 Day =1440 minutes\n  }\n  /**\n   * Returns the base URL for MSG91 api call\n   * @returns {string} Base URL for MSG91 api call\n   */\n\n\n  _createClass(SendOtp, [{\n    key: \"setOtpExpiry\",\n\n    /**\n     * Set the OTP expiry minutes for MSG91 api call\n     */\n    value: function setOtpExpiry(otp_expiry) {\n      this.otp_expiry = otp_expiry;\n      return;\n    }\n    /**\n     * Returns the 4 digit otp\n     * @returns {integer} 4 digit otp\n     */\n\n  }, {\n    key: \"send\",\n\n    /**\n     * Send Otp to given mobile number\n     * @param {string} contactNumber receiver's mobile number along with country code\n     * @param {string} senderId\n     * @param {string, optional} otp\n     * Return promise if no callback is passed and promises available\n     */\n    value: function send(contactNumber, senderId, otp, callback) {\n      if (typeof otp === 'function') {\n        callback = otp;\n        otp = SendOtp.generateOtp();\n      }\n\n      var args = {\n        authkey: this.authKey,\n        mobile: contactNumber,\n        sender: senderId,\n        message: this.messageTemplate.replace('{{otp}}', otp),\n        otp: otp,\n        otp_expiry: this.otp_expiry\n      };\n      return SendOtp.doRequest('get', \"sendotp.php\", args, callback);\n    }\n    /**\n     * Retry Otp to given mobile number\n     * @param {string} contactNumber receiver's mobile number along with country code\n     * @param {boolean} retryVoice, false to retry otp via text call, default true\n     * Return promise if no callback is passed and promises available\n     */\n\n  }, {\n    key: \"retry\",\n    value: function retry(contactNumber, retryVoice, callback) {\n      var retryType = 'voice';\n\n      if (!retryVoice) {\n        retryType = 'text';\n      }\n\n      var args = {\n        authkey: this.authKey,\n        mobile: contactNumber,\n        retrytype: retryType\n      };\n      return SendOtp.doRequest('get', \"retryotp.php\", args, callback);\n    }\n    /**\n     * Verify Otp to given mobile number\n     * @param {string} contactNumber receiver's mobile number along with country code\n     * @param {string} otp otp to verify\n     * Return promise if no callback is passed and promises available\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify(contactNumber, otp, callback) {\n      var args = {\n        authkey: this.authKey,\n        mobile: contactNumber,\n        otp: otp\n      };\n      return SendOtp.doRequest('get', \"verifyRequestOTP.php\", args, callback);\n    }\n  }], [{\n    key: \"getBaseURL\",\n    value: function getBaseURL() {\n      return \"https://control.msg91.com/api/\";\n    }\n  }, {\n    key: \"generateOtp\",\n    value: function generateOtp() {\n      return Math.floor(1000 + Math.random() * 9000);\n    }\n  }, {\n    key: \"doRequest\",\n    value: function doRequest(method, path, params, callback) {\n      if (typeof params === 'function') {\n        callback = params;\n        params = {};\n      } // Return promise if no callback is passed and promises available\n      else if (callback === undefined && this.allow_promise) {\n          promise = true;\n        }\n\n      var options = {\n        method: method,\n        url: SendOtp.getBaseURL() + \"\" + path\n      };\n\n      if (method === 'get') {\n        options.qs = params;\n      } // Pass form data if post\n\n\n      if (method === 'post') {\n        var formKey = 'form';\n\n        if (typeof params.media !== 'undefined') {\n          formKey = 'formData';\n        }\n\n        options[formKey] = params;\n      }\n\n      request(options, function (error, response, data) {\n        // request error\n        if (error) {\n          return callback(error, data);\n        } // JSON parse error or empty strings\n\n\n        try {\n          // An empty string is a valid response\n          if (data === '') {\n            data = {};\n          } else {\n            data = JSON.parse(data);\n          }\n        } catch (parseError) {\n          return callback(new Error('JSON parseError with HTTP Status: ' + response.statusCode + ' ' + response.statusMessage), data);\n        } // response object errors\n        // This should return an error object not an array of errors\n\n\n        if (data.errors !== undefined) {\n          return callback(data.errors, data);\n        } // status code errors\n\n\n        if (response.statusCode < 200 || response.statusCode > 299) {\n          return callback(new Error('HTTP Error: ' + response.statusCode + ' ' + response.statusMessage), data);\n        } // no errors\n\n\n        callback(null, data);\n      });\n    }\n  }]);\n\n  return SendOtp;\n}();\n\nmodule.exports = SendOtp;","map":null,"metadata":{},"sourceType":"script"}