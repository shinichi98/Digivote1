{"ast":null,"code":"import ipfs from './ipfs'; // function for sending any file into IPFS and returns the hash.\n\nexport var ipfsSender = function ipfsSender(file) {\n  return new Promise(function (resolve, reject) {\n    var buffer = Buffer.from(JSON.stringify(file));\n    ipfs.add(buffer, function (err, ipfsHash) {\n      if (ipfsHash) {\n        resolve(ipfsHash[0].hash); //this.setState({ ipfsHash:ipfsHash[0].hash })\n      } else {\n        reject(\"something is not good :(\" + err);\n      }\n    });\n  });\n}; //function for fetching the data from the IPFS through the hash.\n\nexport var ipfsFetcher = function ipfsFetcher(hash) {\n  return new Promise(function (resolve, reject) {\n    fetch(\"https://ipfs.io/ipfs/\".concat(hash)).then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      if (result) {\n        resolve(result); //this.setState({ipfsData:result})\n      }\n    }, function (error) {\n      reject(error);\n    });\n  });\n};","map":{"version":3,"sources":["/home/utkarsh/study2/proj/DigiVote/client/src/ipfsStore.js"],"names":["ipfs","ipfsSender","file","Promise","resolve","reject","buffer","Buffer","from","JSON","stringify","add","err","ipfsHash","hash","ipfsFetcher","fetch","then","res","json","result","error"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB,C,CAEA;;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAU;AAEhC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEtC,QAAIC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAZ,CAAb;AACAF,IAAAA,IAAI,CAACW,GAAL,CAASL,MAAT,EAAiB,UAACM,GAAD,EAAMC,QAAN,EAAmB;AAClC,UAAGA,QAAH,EAAY;AACVT,QAAAA,OAAO,CAACS,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAb,CAAP,CADU,CAGV;AACD,OAJD,MAIK;AACHT,QAAAA,MAAM,CAAC,6BAA6BO,GAA9B,CAAN;AACD;AACF,KARD;AAUD,GAbM,CAAP;AAeD,CAjBI,C,CAmBP;;AACA,OAAO,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACD,IAAD,EAAU;AAEjC,SAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCW,IAAAA,KAAK,gCAAyBF,IAAzB,EAAL,CACCG,IADD,CACM,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KADT,EAECF,IAFD,CAGI,UAACG,MAAD,EAAY;AACV,UAAGA,MAAH,EAAU;AACRhB,QAAAA,OAAO,CAACgB,MAAD,CAAP,CADQ,CAER;AACD;AACF,KARL,EASI,UAACC,KAAD,EAAW;AACThB,MAAAA,MAAM,CAACgB,KAAD,CAAN;AACD,KAXL;AAaD,GAdM,CAAP;AAgBD,CAlBI","sourcesContent":["import ipfs from './ipfs'\n\n// function for sending any file into IPFS and returns the hash.\nexport const ipfsSender = (file) => {\n\n    return new Promise((resolve, reject) => {\n\n      let buffer = Buffer.from(JSON.stringify(file))\n      ipfs.add(buffer, (err, ipfsHash) => {\n        if(ipfsHash){\n          resolve(ipfsHash[0].hash)\n\n          //this.setState({ ipfsHash:ipfsHash[0].hash })\n        }else{\n          reject(\"something is not good :(\" + err);\n        }   \n      })\n\n    })\n\n  }\n\n//function for fetching the data from the IPFS through the hash.\nexport const ipfsFetcher = (hash) => {\n    \n    return new Promise((resolve, reject) => {\n      fetch(`https://ipfs.io/ipfs/${hash}`)\n      .then(res => res.json())\n      .then(\n          (result) => {\n            if(result){\n              resolve(result)\n              //this.setState({ipfsData:result})\n            } \n          },\n          (error) => {\n            reject(error)\n          }\n      )\n    })\n\n  }"]},"metadata":{},"sourceType":"module"}