{"ast":null,"code":"import _regeneratorRuntime from \"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/utkarsh/study2/proj/DigiVote/client/src/Organizer/OrganizerLogin.jsx\";\nimport React, { Component } from 'react';\nimport { ipfsFetcher, ipfsSender } from '../ipfsStore';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Home from '@material-ui/icons/Home';\nimport Fade from '@material-ui/core/Fade';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nvar OrganizerLogin = /*#__PURE__*/function (_Component) {\n  _inherits(OrganizerLogin, _Component);\n\n  function OrganizerLogin(props) {\n    var _this;\n\n    _classCallCheck(this, OrganizerLogin);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OrganizerLogin).call(this, props));\n\n    _this.SignUp = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var _this$props$userObjec, contract, accounts, isUsernamePresent, CredentialsData, ipfsCredentialsHash, PersonalData, ipfsPersonalHash;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.setState({\n                  loaderStart: true\n                });\n\n                event.preventDefault(); //checking for the empty textfiled or entry\n\n                if (!((_this.state.username && _this.state.name && _this.state.mobile && _this.state.Organization && _this.state.password) == \"\")) {\n                  _context.next = 7;\n                  break;\n                }\n\n                alert(\"Enter all the Details First !!\");\n\n                _this.setState({\n                  isSignUp: false,\n                  loaderStart: false\n                });\n\n                _context.next = 35;\n                break;\n\n              case 7:\n                _this$props$userObjec = _this.props.userObject, contract = _this$props$userObjec.contract, accounts = _this$props$userObjec.accounts; // //calling function by providing the password and returns the Account Address\n                // await this.props.userObject.accountCreator(\"test\");\n                // console.log(this.props.userObject.acc);\n                //prepering the image\n                //-------------------Calling fucntion for the Organizer Credentials Data------------------\n\n                isUsernamePresent = false;\n                _context.next = 11;\n                return contract.methods.findOrganizer(_this.state.username).call().then(function (res) {\n                  return isUsernamePresent = res;\n                }).catch(console.error);\n\n              case 11:\n                if (isUsernamePresent) {\n                  _context.next = 32;\n                  break;\n                }\n\n                CredentialsData = {\n                  Username: _this.state.username,\n                  Password: _this.state.password,\n                  Address: accounts[0] //this.state.accAddress\n\n                }; //calling the promise by providing the data to convert it to hash\n\n                _context.next = 15;\n                return ipfsSender(CredentialsData);\n\n              case 15:\n                ipfsCredentialsHash = _context.sent;\n\n                _this.setState({\n                  ipfsCredentialsHash: ipfsCredentialsHash\n                });\n\n                console.log(_this.state.ipfsCredentialsHash); //function for sending hash to the blockchain\n\n                _context.next = 20;\n                return contract.methods.setOrganizerCredentials(_this.state.username, _this.state.ipfsCredentialsHash).send({\n                  from: accounts[2],\n                  gas: 6721975\n                }).then(function (receipt) {\n                  console.log(receipt);\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 20:\n                //-------------------Calling fucntion for the Organizer Personal Data------------------\n                PersonalData = {\n                  Username: _this.state.username,\n                  Address: accounts[0],\n                  //this.state.accAddress\n                  Name: _this.state.name,\n                  Organization: _this.state.Organization,\n                  Mobile: _this.state.mobile,\n                  DP: _this.state.DP\n                }; //calling the promise by providing the data to convert it to hash\n\n                _context.next = 23;\n                return ipfsSender(PersonalData);\n\n              case 23:\n                ipfsPersonalHash = _context.sent;\n\n                _this.setState({\n                  ipfsPersonalHash: ipfsPersonalHash\n                });\n\n                console.log(_this.state.ipfsPersonalHash); //function for sending hash to the blockchain\n\n                _context.next = 28;\n                return contract.methods.setOrganizerPersonal(_this.state.username, _this.state.ipfsPersonalHash).send({\n                  from: accounts[2],\n                  gas: 6721975\n                }).then(function (receipt) {\n                  console.log(receipt);\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 28:\n                //-------------------------------------Functions for retireving the Data from the Blockchain-----------------\n                // //calling for fetching the hash from the blockchain.\n                // let result;\n                // await contract.methods.getOrganizerPersonal(this.state.username).call()\n                // .then((res) => result = res)\n                // .catch(console.error)\n                // //calling the promise by providing the hash to convert it to data\n                // let ipfsPersonalData = await ipfsFetcher(result)\n                _this.setState({\n                  //ipfsPersonalData,\n                  isSignUp: true,\n                  goToSignUp: false,\n                  loaderStart: false\n                });\n\n                alert(\"Thank You for Register !\"); // console.log(this.state.ipfsPersonalData)\n\n                _context.next = 35;\n                break;\n\n              case 32:\n                _this.setState({\n                  loaderStart: false\n                });\n\n                console.log(\"Username is Already Excist\");\n                alert(\"Username is already excist\");\n\n              case 35:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.SignIn = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n        var _this$props$userObjec2, contract, web3, username, result, hash, ipfsCredentailsData;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this.setState({\n                  loaderStart: true\n                }); //checking if the entered value is empty\n\n\n                if ((_this.state.inputUsername && _this.state.inputPassword) == \"\") {\n                  alert(\"Please Enter something !!\");\n\n                  _this.setState({\n                    loaderStart: false\n                  });\n                }\n\n                event.preventDefault();\n                _this$props$userObjec2 = _this.props.userObject, contract = _this$props$userObjec2.contract, web3 = _this$props$userObjec2.web3;\n                username = _this.state.inputUsername;\n                _context2.next = 7;\n                return contract.methods.findOrganizer(username).call().then(function (res) {\n                  return result = res;\n                }).catch(console.error);\n\n              case 7:\n                console.log(result);\n\n                if (!result) {\n                  _context2.next = 32;\n                  break;\n                }\n\n                _context2.next = 11;\n                return contract.methods.getOrganizerCredentials(username).call().then(function (res) {\n                  return hash = res;\n                }).catch(console.error);\n\n              case 11:\n                _context2.next = 13;\n                return ipfsFetcher(hash);\n\n              case 13:\n                ipfsCredentailsData = _context2.sent;\n\n                _this.setState({\n                  ipfsCredentailsData: ipfsCredentailsData\n                });\n\n                console.log(ipfsCredentailsData);\n\n                if (!(ipfsCredentailsData.Password === _this.state.inputPassword)) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                _context2.next = 19;\n                return web3.eth.personal.unlockAccount(ipfsCredentailsData.Address, ipfsCredentailsData.Password, 600).then(console.log(\"Unlock\"));\n\n              case 19:\n                _this.setState({\n                  isUnlock: true\n                });\n\n                console.log(_this.state.isUnlock);\n\n                _this.props.updateOrganizerData(ipfsCredentailsData);\n\n                _this.props.loginUpdate(true);\n\n                _this.setState({\n                  loaderStart: false\n                });\n\n                console.log(\"You are Login :)\");\n                _context2.next = 30;\n                break;\n\n              case 27:\n                _this.setState({\n                  loaderStart: false\n                });\n\n                console.log(\"Invalid Password\");\n                alert(\"Invalid Password, try Again !!\");\n\n              case 30:\n                _context2.next = 35;\n                break;\n\n              case 32:\n                _this.setState({\n                  loaderStart: false\n                });\n\n                console.log(\"Try Again , Invalid Username\");\n                alert(\"Invalid Username, Try Again !!\");\n\n              case 35:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      inputUsername: \"\",\n      inputPassword: \"\",\n      username: \"\",\n      password: \"\",\n      name: \"\",\n      Organization: \"\",\n      mobile: \"\",\n      DP: null,\n      ipfsCredentialsHash: null,\n      ipfsCredentailsData: null,\n      ipfsPersonalHash: null,\n      ipfsPersonalData: null,\n      isUnlock: false,\n      isSignUp: false,\n      goToSignUp: false,\n      loaderStart: false\n    };\n    return _this;\n  } //function for Organizer's SignUp (checking for username is not done yet)\n\n\n  _createClass(OrganizerLogin, [{\n    key: \"updateInputUsername\",\n    value: function updateInputUsername(evt) {\n      this.setState({\n        inputUsername: evt.target.value\n      });\n    }\n  }, {\n    key: \"updateInputPassword\",\n    value: function updateInputPassword(evt) {\n      this.setState({\n        inputPassword: evt.target.value\n      });\n    }\n  }, {\n    key: \"updateUsername\",\n    value: function updateUsername(evt) {\n      this.setState({\n        username: evt.target.value\n      });\n    }\n  }, {\n    key: \"updateName\",\n    value: function updateName(evt) {\n      this.setState({\n        name: evt.target.value\n      });\n    }\n  }, {\n    key: \"updatePassword\",\n    value: function updatePassword(evt) {\n      this.setState({\n        password: evt.target.value\n      });\n    }\n  }, {\n    key: \"updateOrganization\",\n    value: function updateOrganization(evt) {\n      this.setState({\n        Organization: evt.target.value\n      });\n    }\n  }, {\n    key: \"updateMobile\",\n    value: function updateMobile(evt) {\n      this.setState({\n        mobile: evt.target.value\n      });\n    }\n  }, {\n    key: \"updateDP\",\n    value: function updateDP(evt) {\n      this.setState({\n        DP: evt.target.files[0]\n      });\n    } // accountCheck = async() => {\n    //   const {contract} = this.props.userObject;\n    //   await contract.methods.getOrganizerPersonal(\"prateekmedy\").call()\n    //   .then(console.log)\n    //   .catch(console.error)\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(\"OrganizerLogin\");\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"testClass\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Fade, {\n        in: this.state.loaderStart === true,\n        unmountOnExit: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        className: \"loaderDiv1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(CircularProgress, {\n        className: \"loader\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        className: \"testClass\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 15\n        }\n      }, this.state.goToSignUp ? /*#__PURE__*/React.createElement(Paper, {\n        elevation: 2,\n        className: \"RegisterCard\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 27\n        }\n      }, \"Organizer Register\"), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 24,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        required: true,\n        name: \"username\",\n        id: \"username\",\n        label: \"Username\",\n        value: this.state.username,\n        onChange: function onChange(evt) {\n          return _this2.updateUsername(evt);\n        },\n        margin: \"normal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 31\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        required: true,\n        name: \"name\",\n        id: \"name\",\n        label: \"Name\",\n        value: this.state.name,\n        onChange: function onChange(evt) {\n          return _this2.updateName(evt);\n        },\n        margin: \"normal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 31\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        required: true,\n        name: \"Organization\",\n        id: \"Organization\",\n        label: \"Organization\",\n        value: this.state.Organization,\n        onChange: function onChange(evt) {\n          return _this2.updateOrganization(evt);\n        },\n        margin: \"normal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 31\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        required: true,\n        name: \"Mobile\",\n        id: \"Mobile\",\n        label: \"Mobile\",\n        value: this.state.mobile,\n        onChange: function onChange(evt) {\n          return _this2.updateMobile(evt);\n        },\n        type: \"number\",\n        margin: \"normal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 31\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        required: true,\n        name: \"Password\",\n        id: \"Password\",\n        label: \"Password\",\n        value: this.state.password,\n        onChange: function onChange(evt) {\n          return _this2.updatePassword(evt);\n        },\n        margin: \"normal\",\n        type: \"password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"input\", {\n        accept: \"image/*\",\n        id: \"DP\",\n        name: \"DP\",\n        type: \"file\",\n        onChange: function onChange(evt) {\n          return _this2.updateDP(evt);\n        },\n        style: {\n          display: \"none\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"DP\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 31\n        }\n      }, \"Upload the Profile Image\", /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        component: \"span\",\n        style: {\n          marginLeft: \"10px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 33\n        }\n      }, \"Upload\"))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        style: {\n          marginTop: \"60px\",\n          margin: \"5px\"\n        },\n        onClick: this.SignUp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 31\n        }\n      }, \"SignUp\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        style: {\n          marginTop: \"60px\",\n          margin: \"5px\"\n        },\n        onClick: function onClick() {\n          return _this2.setState({\n            goToSignUp: false\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 31\n        }\n      }, \"Back\")))) : /*#__PURE__*/React.createElement(Paper, {\n        elevation: 2,\n        className: \"loginCard\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 27\n        }\n      }, \"Organizer Login\"), /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.SignIn,\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        required: true,\n        name: \"username\",\n        id: \"username\",\n        label: \"Username\",\n        value: this.state.inputUsername,\n        onChange: function onChange(evt) {\n          return _this2.updateInputUsername(evt);\n        },\n        margin: \"normal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(TextField, {\n        required: true,\n        name: \"password\",\n        id: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        value: this.state.inputPassword,\n        onChange: function onChange(evt) {\n          return _this2.updateInputPassword(evt);\n        },\n        margin: \"normal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        style: {\n          marginTop: \"30px\",\n          margin: \"5px\"\n        },\n        onClick: this.SignIn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 29\n        }\n      }, \"Login\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        style: {\n          marginTop: \"30px\",\n          margin: \"5px\"\n        },\n        onClick: function onClick() {\n          return _this2.setState({\n            goToSignUp: true\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 29\n        }\n      }, \"Register\")), /*#__PURE__*/React.createElement(Home, {\n        className: \"HomeIcon\",\n        onClick: function onClick() {\n          return _this2.props.updateHomeState(0, null);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 27\n        }\n      }))));\n    }\n  }]);\n\n  return OrganizerLogin;\n}(Component);\n\nexport default OrganizerLogin;","map":{"version":3,"sources":["/home/utkarsh/study2/proj/DigiVote/client/src/Organizer/OrganizerLogin.jsx"],"names":["React","Component","ipfsFetcher","ipfsSender","Paper","Grid","TextField","Button","Typography","Home","Fade","CircularProgress","OrganizerLogin","props","SignUp","event","setState","loaderStart","preventDefault","state","username","name","mobile","Organization","password","alert","isSignUp","userObject","contract","accounts","isUsernamePresent","methods","findOrganizer","call","then","res","catch","console","error","CredentialsData","Username","Password","Address","ipfsCredentialsHash","log","setOrganizerCredentials","send","from","gas","receipt","PersonalData","Name","Mobile","DP","ipfsPersonalHash","setOrganizerPersonal","goToSignUp","SignIn","inputUsername","inputPassword","web3","result","getOrganizerCredentials","hash","ipfsCredentailsData","eth","personal","unlockAccount","isUnlock","updateOrganizerData","loginUpdate","ipfsPersonalData","evt","target","value","files","updateUsername","updateName","updateOrganization","updateMobile","updatePassword","updateDP","display","marginLeft","marginTop","margin","updateInputUsername","updateInputPassword","updateHomeState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {ipfsFetcher, ipfsSender} from '../ipfsStore'\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Home from '@material-ui/icons/Home';\nimport Fade from '@material-ui/core/Fade';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nclass OrganizerLogin extends Component{   \n\n    constructor(props){\n        super(props)\n        this.state = {\n            inputUsername:\"\",\n            inputPassword:\"\",\n            username : \"\",\n            password : \"\",\n            name : \"\",\n            Organization : \"\",\n            mobile : \"\",\n            DP : null,\n            ipfsCredentialsHash: null,\n            ipfsCredentailsData: null,\n            ipfsPersonalHash: null,\n            ipfsPersonalData: null,\n            isUnlock:false,\n            isSignUp : false,\n            goToSignUp : false,\n            loaderStart : false\n        }\n    }\n    \n  //function for Organizer's SignUp (checking for username is not done yet)\n  SignUp = async(event) => {\n\n    this.setState({ loaderStart : true })\n\n    event.preventDefault()\n\n    //checking for the empty textfiled or entry\n    if((this.state.username && this.state.name && this.state.mobile && this.state.Organization && this.state.password) == \"\"){\n      alert(\"Enter all the Details First !!\")\n      this.setState({ isSignUp : false, loaderStart : false })\n      \n    }else{\n      const {contract, accounts} = this.props.userObject\n      // //calling function by providing the password and returns the Account Address\n      // await this.props.userObject.accountCreator(\"test\");\n\n      // console.log(this.props.userObject.acc);\n\n      //prepering the image\n\n\n      //-------------------Calling fucntion for the Organizer Credentials Data------------------\n\n      let isUsernamePresent = false\n      await contract.methods.findOrganizer(this.state.username).call()\n      .then(res => isUsernamePresent = res)\n      .catch(console.error)\n\n      if(!isUsernamePresent){\n\n        let CredentialsData = {\n          Username : this.state.username,\n          Password : this.state.password,\n          Address  : accounts[0] //this.state.accAddress\n        }  \n    \n        //calling the promise by providing the data to convert it to hash\n        let ipfsCredentialsHash = await ipfsSender(CredentialsData)\n        this.setState({ipfsCredentialsHash})\n        console.log(this.state.ipfsCredentialsHash)\n    \n        //function for sending hash to the blockchain\n        await contract.methods.setOrganizerCredentials(this.state.username, this.state.ipfsCredentialsHash).send({from: accounts[2],gas:6721975})\n        .then((receipt) => {\n          console.log(receipt)\n        })\n        .catch((error) => {\n          console.log(error)\n        });\n    \n        //-------------------Calling fucntion for the Organizer Personal Data------------------\n        let PersonalData = {\n          Username      : this.state.username,\n          Address       : accounts[0], //this.state.accAddress\n          Name          : this.state.name,\n          Organization  : this.state.Organization,\n          Mobile        : this.state.mobile,\n          DP            : this.state.DP\n        }  \n    \n        //calling the promise by providing the data to convert it to hash\n        let ipfsPersonalHash = await ipfsSender(PersonalData)\n        this.setState({ipfsPersonalHash})\n        console.log(this.state.ipfsPersonalHash)\n    \n        //function for sending hash to the blockchain\n        await contract.methods.setOrganizerPersonal(this.state.username,this.state.ipfsPersonalHash).send({from: accounts[2],gas:6721975})\n        .then((receipt) => {\n          console.log(receipt)\n        })\n        .catch((error) => {\n          console.log(error)\n        });\n    \n    \n        //-------------------------------------Functions for retireving the Data from the Blockchain-----------------\n        // //calling for fetching the hash from the blockchain.\n        // let result;\n        // await contract.methods.getOrganizerPersonal(this.state.username).call()\n        // .then((res) => result = res)\n        // .catch(console.error)\n    \n        // //calling the promise by providing the hash to convert it to data\n        // let ipfsPersonalData = await ipfsFetcher(result)\n        this.setState({//ipfsPersonalData,\n          isSignUp : true, \n          goToSignUp : false, \n          loaderStart : false\n        })\n        alert(\"Thank You for Register !\")\n        // console.log(this.state.ipfsPersonalData)\n    \n        \n      }else{\n        this.setState({ loaderStart : false })\n        console.log(\"Username is Already Excist\")\n        alert(\"Username is already excist\")\n      }\n      \n    }\n\n    \n\n  }\n \n  SignIn = async(event) => {\n\n    this.setState({ loaderStart : true })\n\n    //checking if the entered value is empty\n    if((this.state.inputUsername && this.state.inputPassword) == \"\"){\n      alert(\"Please Enter something !!\")\n      this.setState({ loaderStart : false})\n    }\n\n    event.preventDefault();\n\n    const {contract, web3} = this.props.userObject\n    const username = this.state.inputUsername\n    let result\n\n    await contract.methods.findOrganizer(username).call()\n    .then((res) => result = res)\n    .catch(console.error)\n\n    console.log(result)\n    if(result){\n\n      let hash;\n      await contract.methods.getOrganizerCredentials(username).call()\n      .then((res) => hash = res)\n      .catch(console.error)\n\n      //this.setState({isUnlock:true}) //try for debugging please remove it after debugging\n  \n      //calling the promise by providing the hash to convert it to data\n      let ipfsCredentailsData = await ipfsFetcher(hash)\n      this.setState({ipfsCredentailsData})\n      console.log(ipfsCredentailsData)\n\n      if(ipfsCredentailsData.Password === this.state.inputPassword){\n            await web3.eth.personal.unlockAccount(ipfsCredentailsData.Address,ipfsCredentailsData.Password,600)\n            .then(console.log(\"Unlock\"))\n\n            this.setState({isUnlock:true})\n            console.log(this.state.isUnlock)\n\n            this.props.updateOrganizerData(ipfsCredentailsData)\n            this.props.loginUpdate(true)\n            \n            this.setState({ loaderStart : false })\n            console.log(\"You are Login :)\")\n      }else{\n        this.setState({ loaderStart : false })\n        console.log(\"Invalid Password\")\n        alert(\"Invalid Password, try Again !!\")\n      }\n\n  \n    }else{\n      this.setState({ loaderStart : false })\n      console.log(\"Try Again , Invalid Username\")\n      alert(\"Invalid Username, Try Again !!\")\n    } \n    \n  }\n\n  updateInputUsername(evt) {\n    this.setState({\n      inputUsername: evt.target.value\n    });\n  }\n\n  updateInputPassword(evt) {\n    this.setState({\n      inputPassword: evt.target.value\n    });\n  }\n\n  updateUsername(evt) {\n    this.setState({\n      username: evt.target.value\n    });\n  }\n\n  updateName(evt) {\n    this.setState({\n      name: evt.target.value\n    });\n  }\n\n  updatePassword(evt) {\n    this.setState({\n      password: evt.target.value\n    });\n  }\n\n  updateOrganization(evt) {\n    this.setState({\n      Organization: evt.target.value\n    });\n  }\n\n  updateMobile(evt) {\n    this.setState({\n      mobile: evt.target.value\n    });\n  }\n\n  updateDP(evt) {\n    this.setState({\n      DP: evt.target.files[0]\n    });\n  }\n\n  // accountCheck = async() => {\n  //   const {contract} = this.props.userObject;\n\n  //   await contract.methods.getOrganizerPersonal(\"prateekmedy\").call()\n  //   .then(console.log)\n  //   .catch(console.error)\n\n  // }\n\n    render(){\n        console.log(\"OrganizerLogin\")\n        \n        return (\n            <div  className=\"testClass\">\n              <Fade\n                    in={this.state.loaderStart === true}\n                    unmountOnExit\n                >\n                    <Grid \n                        container \n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        className=\"loaderDiv1\"\n                    >\n                        <CircularProgress className=\"loader\"/>\n                    </Grid>\n                </Fade>\n              <Grid \n                container \n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                className=\"testClass\"\n                >\n                  {\n                    this.state.goToSignUp\n                      ? <Paper \n                          elevation={2}\n                          className=\"RegisterCard\"\n                        >\n                          <Typography variant=\"h4\" gutterBottom>Organizer Register</Typography>\n                          <Grid container spacing={24}>\n                            <Grid item xs={6}>\n                              <TextField\n                                  required\n                                  name=\"username\"\n                                  id=\"username\"\n                                  label=\"Username\"\n                                  value={this.state.username}\n                                  onChange={evt => this.updateUsername(evt)}\n                                  margin=\"normal\"\n                                />\n                            </Grid>\n                            <Grid item xs={6}>\n                              <TextField\n                                required\n                                name=\"name\"\n                                id=\"name\"\n                                label=\"Name\"\n                                value={this.state.name}\n                                onChange={evt => this.updateName(evt)}\n                                margin=\"normal\"\n                              />\n                            </Grid>\n                            <Grid item xs={6}>\n                              <TextField\n                                required\n                                name=\"Organization\"\n                                id=\"Organization\"\n                                label=\"Organization\"\n                                value={this.state.Organization}\n                                onChange={evt => this.updateOrganization(evt)}\n                                margin=\"normal\"\n                              />\n                            </Grid>\n                            <Grid item xs={6}>\n                              <TextField\n                                required\n                                name=\"Mobile\"\n                                id=\"Mobile\"\n                                label=\"Mobile\"\n                                value={this.state.mobile}\n                                onChange={evt => this.updateMobile(evt)}\n                                type=\"number\"\n                                margin=\"normal\"\n                              />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                  required\n                                  name=\"Password\"\n                                  id=\"Password\"\n                                  label=\"Password\"\n                                  value={this.state.password}\n                                  onChange={evt => this.updatePassword(evt)}\n                                  margin=\"normal\"\n                                  type=\"password\"\n                                />\n                            </Grid>\n                            <input\n                              accept=\"image/*\"\n                              id=\"DP\"\n                              name=\"DP\"\n                              type=\"file\"\n                              onChange={evt => this.updateDP(evt)}\n                              style={{\n                                display:\"none\"\n                              }}\n                            />\n                            <Grid item xs={12}>\n                              <label htmlFor=\"DP\">\n                                Upload the Profile Image\n                                <Button variant=\"contained\" component=\"span\" style={{ marginLeft : \"10px\"}}>\n                                  Upload\n                                </Button>\n                              </label>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Button \n                                variant=\"contained\" \n                                color=\"primary\"\n                                style={{\n                                  marginTop : \"60px\",\n                                  margin:\"5px\"\n                                }}\n                                onClick={this.SignUp}\n                              >SignUp</Button>\n                              <Button \n                                variant=\"contained\"\n                                style={{\n                                  marginTop : \"60px\",\n                                  margin:\"5px\"\n                                }}\n                                onClick={() => this.setState({ goToSignUp : false })}\n                              >Back</Button>\n                            </Grid>\n                          </Grid>\n                        </Paper>\n                      : <Paper \n                          elevation={2}\n                          className=\"loginCard\"\n                        >\n                          <Typography variant=\"h4\" gutterBottom>Organizer Login</Typography>\n                          <form onSubmit={this.SignIn} autoComplete=\"off\">\n                            <TextField\n                              required\n                              name=\"username\"\n                              id=\"username\"\n                              label=\"Username\"\n                              value={this.state.inputUsername}\n                              onChange={evt => this.updateInputUsername(evt)}\n                              margin=\"normal\"\n                            />\n                            <br />\n                            <TextField\n                              required\n                              name=\"password\"\n                              id=\"password\"\n                              label=\"Password\"\n                              type=\"password\"\n                              value={this.state.inputPassword}\n                              onChange={evt => this.updateInputPassword(evt)}\n                              margin=\"normal\"\n                            />\n                            <br />\n                            <Button \n                              variant=\"contained\" \n                              color=\"primary\"\n                              style={{\n                                marginTop : \"30px\",\n                                margin:\"5px\"\n                              }} \n                              onClick={this.SignIn}  \n                            >Login</Button>\n                            <Button \n                              variant=\"contained\" \n                              color=\"secondary\"\n                              style={{\n                                marginTop : \"30px\",\n                                margin:\"5px\"\n                              }}\n                              onClick={() => this.setState({ goToSignUp : true })}\n                            >Register</Button>\n                          </form>\n                          <Home className=\"HomeIcon\" onClick={() => this.props.updateHomeState(0, null)} />\n                        </Paper>\n                  }  \n              </Grid>\n            </div>\n        ) \n    }\n          \n}\n\nexport default OrganizerLogin;"]},"metadata":{},"sourceType":"module"}