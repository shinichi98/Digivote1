{"ast":null,"code":"import _regeneratorRuntime from \"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/utkarsh/study2/proj/DigiVote/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/utkarsh/study2/proj/DigiVote/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport ElectionContract from \"./contracts/Election.json\";\nimport Web3 from 'web3'; //import CandidateHome from './Candidate/CandidateHome'\n//import OragnizerHome from './Organizer/OrganizerHome'\n\nimport Home from './HomePage'; //import {accountCreator} from './utils/AccountCreater'\n//import {ipfsFetcher} from './ipfsStore'\n\nimport \"./App.css\"; //const Buffer = require('buffer/').Buffer;\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      web3: null,\n      accounts: null,\n      contract: null,\n      buffer: '',\n      abi: null,\n      ipfsCredentialsHash: null,\n      ipfsCredentailsData: null,\n      ipfsPersonalHash: null,\n      ipfsPersonalData: null,\n      accAddress: null,\n      isLogin: false,\n      inputValue: \"\"\n    };\n\n    _this.updateAccount = function (acc) {\n      _this.setState({\n        accAddress: acc\n      });\n    };\n\n    _this.accountCreator = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(password) {\n        var _this$state, web3, accounts, accAddress;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$state = _this.state, web3 = _this$state.web3, accounts = _this$state.accounts;\n                _context.next = 3;\n                return web3.eth.personal.newAccount(password).then(function (res) {\n                  accAddress = res;\n                });\n\n              case 3:\n                //store the account address in the state\n                _this.setState({\n                  accAddress: accAddress\n                }); //console.log(accAddress)\n                // trasaction for recharging the new account\n\n\n                _context.next = 6;\n                return web3.eth.sendTransaction({\n                  from: accounts[0],\n                  to: accAddress,\n                  value: web3.utils.toWei(\"0.5\", \"ether\")\n                }).then(console.log);\n\n              case 6:\n                // console the current balance of new account\n                web3.eth.getBalance(accAddress).then(function (res) {\n                  return console.log(web3.utils.fromWei(res, 'ether'));\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.componentDidMount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var web3, accounts, networkIdE, deployedNetworkE, instance;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return new Web3(new Web3.providers.HttpProvider(\"HTTP://127.0.0.1:7545\"));\n\n            case 3:\n              web3 = _context2.sent;\n              _context2.next = 6;\n              return web3.eth.getAccounts();\n\n            case 6:\n              accounts = _context2.sent;\n              //promise for knowing the account balance\n              web3.eth.getBalance(accounts[0]).then(function (res) {\n                return console.log(web3.utils.fromWei(res, 'ether'));\n              }); // Get the contract instance for Election.\n\n              _context2.next = 10;\n              return web3.eth.net.getId();\n\n            case 10:\n              networkIdE = _context2.sent;\n              deployedNetworkE = ElectionContract.networks[networkIdE]; //console the ABI for reviewing\n\n              console.log(ElectionContract.abi);\n\n              _this.setState({\n                abi: ElectionContract.abi\n              }); //define the contract instance\n\n\n              instance = new web3.eth.Contract(ElectionContract.abi, deployedNetworkE && deployedNetworkE.address); // Set web3, accounts, and contract to the state, and then proceed\n\n              _this.setState({\n                web3: web3,\n                accounts: accounts,\n                contract: instance\n              });\n\n              _context2.next = 22;\n              break;\n\n            case 18:\n              _context2.prev = 18;\n              _context2.t0 = _context2[\"catch\"](0);\n              // Catch any errors for any of the above operations.\n              alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n              console.error(_context2.t0);\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 18]]);\n    }));\n\n    _this.loginUpdate = function (val) {\n      _this.setState({\n        isLogin: val\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    //render function for JSX returns\n    value: function render() {\n      console.log(\"App\");\n\n      if (!this.state.web3) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 14\n          }\n        }, \"Loading Web3, accounts, and contract...\");\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Home, {\n        contract: this.state.contract,\n        accounts: this.state.accounts,\n        web3: this.state.web3,\n        accountCreator: this.accountCreator,\n        acc: this.state.accAddress,\n        isLogin: this.state.isLogin,\n        loginUpdate: this.loginUpdate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/utkarsh/study2/proj/DigiVote/client/src/App.js"],"names":["React","Component","ElectionContract","Web3","Home","App","state","web3","accounts","contract","buffer","abi","ipfsCredentialsHash","ipfsCredentailsData","ipfsPersonalHash","ipfsPersonalData","accAddress","isLogin","inputValue","updateAccount","acc","setState","accountCreator","password","eth","personal","newAccount","then","res","sendTransaction","from","to","value","utils","toWei","console","log","getBalance","fromWei","componentDidMount","providers","HttpProvider","getAccounts","net","getId","networkIdE","deployedNetworkE","networks","instance","Contract","address","alert","error","loginUpdate","val"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport ElectionContract from \"./contracts/Election.json\"\nimport Web3 from 'web3'\n//import CandidateHome from './Candidate/CandidateHome'\n//import OragnizerHome from './Organizer/OrganizerHome'\nimport Home from './HomePage'\n//import {accountCreator} from './utils/AccountCreater'\n//import {ipfsFetcher} from './ipfsStore'\nimport \"./App.css\"\n\n\n\n//const Buffer = require('buffer/').Buffer;\n\nclass App extends Component {\n\n  //declaring the state of the application\n  state = { \n            web3: null, \n            accounts: null, \n            contract: null, \n            buffer:'', \n            abi:null, \n            ipfsCredentialsHash: null,\n            ipfsCredentailsData: null,\n            ipfsPersonalHash: null,\n            ipfsPersonalData: null,\n            accAddress:null,\n            isLogin :false ,\n            inputValue:\"\"\n          };\n\n\n\n  //function for updating account\n  updateAccount = (acc) => {\n    this.setState({\n      accAddress : acc\n    })\n  }\n\n  //function for creating the new account and recharging it with ether.\n  accountCreator = async(password) => {\n    \n    const {web3, accounts} = this.state;\n    \n    let accAddress;\n    // create new ethereum account with password \n    await web3.eth.personal.newAccount(password)\n    .then( (res) => {accAddress = res});\n\n    //store the account address in the state\n    this.setState({accAddress});\n\n    //console.log(accAddress)\n\n    // trasaction for recharging the new account\n    await web3.eth.sendTransaction({\n      from : accounts[0],\n      to : accAddress,\n      value: web3.utils.toWei(\"0.5\", \"ether\")\n    }).then(console.log);\n\n    // console the current balance of new account\n    web3.eth.getBalance(accAddress)\n    .then((res)=> console.log(web3.utils.fromWei(res, 'ether')));\n\n  }\n\n  componentDidMount = async () => {\n    try {\n\n      // Get network provider and web3 instance.\n      const web3 = await new Web3(new Web3.providers.HttpProvider(\n        \"HTTP://127.0.0.1:7545\"\n      ));\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      //promise for knowing the account balance\n      web3.eth.getBalance(accounts[0])\n      .then((res)=> console.log(web3.utils.fromWei(res, 'ether')));\n\n      // Get the contract instance for Election.\n      const networkIdE = await web3.eth.net.getId();\n      const deployedNetworkE = ElectionContract.networks[networkIdE];\n\n      //console the ABI for reviewing\n      console.log(ElectionContract.abi);\n      this.setState({abi:ElectionContract.abi});\n      \n      //define the contract instance\n      const instance = new web3.eth.Contract(\n        ElectionContract.abi,\n        deployedNetworkE && deployedNetworkE.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed\n      this.setState({ web3, accounts, contract : instance});\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  loginUpdate = (val) => {\n    this.setState({\n      isLogin : val\n    })\n  }\n\n\n  //render function for JSX returns\n  render() {\n    console.log(\"App\")\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n          <Home \n            contract={this.state.contract} \n            accounts={this.state.accounts} \n            web3={this.state.web3} \n            accountCreator={this.accountCreator} \n            acc={this.state.accAddress}\n            isLogin = {this.state.isLogin}\n            loginUpdate = {this.loginUpdate}\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}